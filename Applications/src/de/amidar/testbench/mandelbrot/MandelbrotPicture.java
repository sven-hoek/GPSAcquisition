package de.amidar.testbench.mandelbrot;

public class MandelbrotPicture {
	private static int DEFAULT_WIDTH = 80;
	private static int DEFAULT_HEIGHT = 60;
	
	private static final float[] blue = {0.0f, 0.0f, 1.0f, 1.0f};
	private static final float[] white = {1.0f, 1.0f, 1.0f, 1.0f};
	private static final float[] yellow = {1.0f, 1.0f, 0.0f, 1.0f};
	private static final float[] red = {1.0f, 0.0f, 0.0f, 1.0f};
	private static final float[][] colorCycle = {blue, white, yellow, red};
	private static final int colorResolution = 16;
	
	//Mandelbrot settings 
	private float mbX = -2;
	private float mbY = -2;
	private float mbHeight = 4;
	private float mbWidth = 4;
	private int mbIterations = 128;

	//Display settings
	protected int pictureWidth;
	protected int pictureHeight;
	protected int[] pictureBuffer;
	
	private int[] precomputedColors = {
			255, 987135, 2039807, 3092479, 4145151, 5197823, 6250495, 7303167, 8355839, 9408511,
			10461183, 11513855, 12566527, 13619199, 14671871, 15724543, 16777215, 16777207, 16777199, 16777191,
			16777183, 16777175, 16777167, 16777159, 16777151, 16777143, 16777135, 16777127, 16777119, 16777111,
			16777103, 16777095, 16777087, 16777079, 16777071, 16777063, 16777055, 16777047, 16777039, 16777031,
			16777023, 16777015, 16777007, 16776999, 16776991, 16776983, 16776975, 16776967, 16776960, 16775936,
			16774912, 16773888, 16772864, 16771840, 16770816, 16769792, 16768768, 16767744, 16766720, 16765696,
			16764672, 16763648, 16762624, 16761600, 16760576, 16759552, 16758528, 16757504, 16756480, 16755456,
			16754432, 16753408, 16752384, 16751360, 16750336, 16749312, 16748288, 16747264, 16746240, 16745216,
			16744192, 16743168, 16742144, 16741120, 16740096, 16739072, 16738048, 16737024, 16736000, 16734976,
			16733952, 16732928, 16731904, 16730880, 16729856, 16728832, 16727808, 16726784, 16725760, 16724736,
			16723712, 16722688, 16721664, 16720640, 16719616, 16718592, 16717568, 16716544, 16715520, 16714496,
			16713472, 16712448, 16711680, 16580609, 16449539, 16318469, 16187399, 16056329, 15925259, 15794189,
			15663119, 15532049, 15400979, 15269909, 15138839, 15007769, 14876699, 14745629, 0			
	};
	
	private int[] pictureBufferRef = {
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			2039807, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479,
			3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 3092479, 3092479,
			3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479,
			3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479,
			3092479, 3092479, 3092479, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 3092479, 3092479, 3092479, 3092479, 3092479,
			3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479,
			3092479, 3092479, 4145151, 4145151, 4145151, 4145151, 6250495, 5197823, 5197823, 4145151,
			4145151, 4145151, 3092479, 3092479, 3092479, 3092479, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479,
			3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 4145151,
			4145151, 4145151, 4145151, 4145151, 5197823, 6250495, 8355839, 9408511, 6250495, 6250495,
			5197823, 4145151, 4145151, 4145151, 3092479, 3092479, 3092479, 3092479, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 2039807, 2039807, 2039807, 2039807,
			2039807, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479,
			3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 4145151, 4145151, 4145151,
			4145151, 4145151, 4145151, 5197823, 5197823, 6250495, 7303167, 11513855, 9408511, 11513855,
			16777183, 5197823, 4145151, 4145151, 4145151, 4145151, 3092479, 3092479, 3092479, 3092479,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 2039807, 2039807, 2039807, 2039807, 3092479,
			3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479,
			3092479, 3092479, 3092479, 3092479, 3092479, 4145151, 4145151, 4145151, 4145151, 4145151,
			4145151, 4145151, 5197823, 5197823, 5197823, 7303167, 8355839, 10461183, 16777167, 9408511,
			7303167, 6250495, 5197823, 4145151, 4145151, 4145151, 4145151, 3092479, 3092479, 3092479,
			3092479, 3092479, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 2039807, 2039807, 2039807, 2039807, 3092479, 3092479,
			3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479,
			3092479, 3092479, 3092479, 4145151, 4145151, 4145151, 4145151, 4145151, 4145151, 4145151,
			4145151, 5197823, 5197823, 6250495, 8355839, 13619199, 12566527, 16777135, 0, 12566527,
			9408511, 7303167, 5197823, 5197823, 5197823, 4145151, 4145151, 4145151, 3092479, 3092479,
			3092479, 3092479, 3092479, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 2039807, 2039807, 3092479, 3092479, 3092479, 3092479,
			3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479,
			3092479, 3092479, 4145151, 4145151, 4145151, 4145151, 4145151, 4145151, 4145151, 5197823,
			5197823, 6250495, 6250495, 7303167, 8355839, 14671871, 0, 0, 0, 0,
			16777199, 8355839, 6250495, 5197823, 5197823, 5197823, 5197823, 4145151, 4145151, 3092479,
			3092479, 3092479, 3092479, 3092479, 3092479, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 987135, 987135, 987135,
			987135, 987135, 987135, 2039807, 2039807, 3092479, 3092479, 3092479, 3092479, 3092479,
			3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479,
			4145151, 4145151, 4145151, 4145151, 4145151, 4145151, 4145151, 5197823, 6250495, 6250495,
			6250495, 7303167, 7303167, 8355839, 9408511, 15724543, 0, 0, 0, 0,
			15724543, 8355839, 7303167, 6250495, 6250495, 6250495, 6250495, 5197823, 4145151, 4145151,
			3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 987135, 987135,
			987135, 987135, 987135, 2039807, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479,
			3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 4145151,
			4145151, 4145151, 4145151, 4145151, 5197823, 5197823, 5197823, 7303167, 16777167, 15724543,
			11513855, 9408511, 12566527, 16777207, 0, 16777215, 16777159, 0, 0, 16777159,
			15724543, 16777175, 11513855, 16777191, 8355839, 7303167, 7303167, 11513855, 6250495, 4145151,
			4145151, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 987135, 987135,
			987135, 987135, 2039807, 2039807, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479,
			3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 4145151, 4145151, 4145151,
			4145151, 5197823, 5197823, 5197823, 5197823, 6250495, 6250495, 7303167, 12566527, 16777007,
			0, 16777215, 16777135, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 16777183, 12566527, 14671871, 15724543, 16777215, 15724543, 5197823,
			4145151, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 987135,
			987135, 987135, 2039807, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479,
			3092479, 3092479, 3092479, 3092479, 3092479, 4145151, 4145151, 5197823, 5197823, 5197823,
			5197823, 5197823, 5197823, 5197823, 6250495, 6250495, 7303167, 8355839, 11513855, 16318469,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 15724543, 8355839, 5197823,
			5197823, 4145151, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 987135,
			987135, 987135, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479,
			3092479, 3092479, 4145151, 4145151, 4145151, 5197823, 5197823, 5197823, 5197823, 5197823,
			5197823, 5197823, 6250495, 6250495, 6250495, 7303167, 16777175, 16777159, 16777207, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 16777175, 10461183, 7303167, 6250495,
			5197823, 4145151, 4145151, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 987135,
			987135, 2039807, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 4145151,
			4145151, 4145151, 5197823, 5197823, 7303167, 12566527, 7303167, 7303167, 7303167, 7303167,
			7303167, 7303167, 7303167, 7303167, 7303167, 8355839, 11513855, 16777183, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 16777207, 9408511, 16777191,
			5197823, 4145151, 4145151, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			987135, 3092479, 3092479, 3092479, 3092479, 4145151, 4145151, 4145151, 4145151, 4145151,
			4145151, 5197823, 5197823, 6250495, 7303167, 16777199, 12566527, 16777215, 9408511, 14671871,
			11513855, 9408511, 9408511, 8355839, 9408511, 10461183, 16777159, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 16777079,
			6250495, 4145151, 4145151, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			987135, 3092479, 3092479, 4145151, 4145151, 4145151, 4145151, 4145151, 4145151, 5197823,
			5197823, 5197823, 5197823, 6250495, 7303167, 9408511, 13619199, 0, 16777191, 16777103,
			0, 16777183, 16777151, 12566527, 11513855, 12566527, 16777007, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 13619199, 8355839,
			5197823, 4145151, 4145151, 4145151, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			987135, 3092479, 4145151, 4145151, 4145151, 4145151, 4145151, 4145151, 5197823, 5197823,
			5197823, 5197823, 6250495, 7303167, 8355839, 11513855, 16777199, 0, 0, 0,
			0, 0, 0, 0, 15724543, 16777215, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 16777095, 7303167,
			5197823, 4145151, 4145151, 4145151, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			987135, 4145151, 4145151, 4145151, 4145151, 4145151, 4145151, 5197823, 6250495, 6250495,
			6250495, 8355839, 13619199, 9408511, 11513855, 16777215, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 16777143, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 16776983, 6250495,
			5197823, 4145151, 4145151, 4145151, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			987135, 5197823, 5197823, 5197823, 5197823, 7303167, 6250495, 6250495, 6250495, 7303167,
			7303167, 9408511, 12566527, 16744192, 16777079, 16777095, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 16776960, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 16750336, 7303167, 6250495,
			5197823, 4145151, 4145151, 4145151, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			6250495, 16777167, 16777135, 16777127, 16777071, 0, 16777111, 16777055, 16777079, 16777063,
			16770816, 16767744, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 12566527, 8355839, 7303167, 6250495,
			5197823, 4145151, 4145151, 4145151, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479,
			3092479, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			987135, 5197823, 5197823, 5197823, 5197823, 7303167, 6250495, 6250495, 6250495, 7303167,
			7303167, 9408511, 12566527, 16738048, 16777079, 16777095, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 16776960, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 16750336, 7303167, 6250495,
			5197823, 4145151, 4145151, 4145151, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			987135, 4145151, 4145151, 4145151, 4145151, 4145151, 4145151, 5197823, 6250495, 6250495,
			6250495, 8355839, 13619199, 9408511, 11513855, 16777215, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 16777143, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 16776983, 6250495,
			5197823, 4145151, 4145151, 4145151, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			987135, 3092479, 4145151, 4145151, 4145151, 4145151, 4145151, 4145151, 5197823, 5197823,
			5197823, 5197823, 6250495, 7303167, 8355839, 11513855, 16777199, 0, 0, 0,
			0, 0, 0, 0, 15724543, 16777215, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 16777095, 7303167,
			5197823, 4145151, 4145151, 4145151, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			987135, 3092479, 3092479, 4145151, 4145151, 4145151, 4145151, 4145151, 4145151, 5197823,
			5197823, 5197823, 5197823, 6250495, 7303167, 9408511, 13619199, 0, 16777191, 16777103,
			0, 16777183, 16777151, 12566527, 11513855, 12566527, 16777007, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 13619199, 8355839,
			5197823, 4145151, 4145151, 4145151, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			987135, 3092479, 3092479, 3092479, 3092479, 4145151, 4145151, 4145151, 4145151, 4145151,
			4145151, 5197823, 5197823, 6250495, 7303167, 16777199, 12566527, 16777215, 9408511, 14671871,
			11513855, 9408511, 9408511, 8355839, 9408511, 10461183, 16777159, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 16777079,
			6250495, 4145151, 4145151, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			987135, 2039807, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 4145151,
			4145151, 4145151, 5197823, 5197823, 7303167, 12566527, 7303167, 7303167, 7303167, 7303167,
			7303167, 7303167, 7303167, 7303167, 7303167, 8355839, 11513855, 16777183, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 16777207, 9408511, 16777191,
			5197823, 4145151, 4145151, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			987135, 987135, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479,
			3092479, 3092479, 4145151, 4145151, 4145151, 5197823, 5197823, 5197823, 5197823, 5197823,
			5197823, 5197823, 6250495, 6250495, 6250495, 7303167, 16777175, 16777159, 16777207, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 16777175, 10461183, 7303167, 6250495,
			5197823, 4145151, 4145151, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 987135,
			987135, 987135, 2039807, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479,
			3092479, 3092479, 3092479, 3092479, 3092479, 4145151, 4145151, 5197823, 5197823, 5197823,
			5197823, 5197823, 5197823, 5197823, 6250495, 6250495, 7303167, 8355839, 11513855, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 15724543, 8355839, 5197823,
			5197823, 4145151, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 987135,
			987135, 987135, 2039807, 2039807, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479,
			3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 4145151, 4145151, 4145151,
			4145151, 5197823, 5197823, 5197823, 5197823, 6250495, 6250495, 7303167, 12566527, 16777007,
			0, 16777215, 16777135, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 16777183, 12566527, 14671871, 15724543, 16777215, 15724543, 5197823,
			4145151, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 987135,
			987135, 987135, 987135, 2039807, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479,
			3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 4145151,
			4145151, 4145151, 4145151, 4145151, 5197823, 5197823, 5197823, 7303167, 16777167, 15724543,
			11513855, 9408511, 12566527, 16777207, 16741120, 16777215, 16777159, 0, 0, 16777159,
			15724543, 16777175, 11513855, 16777191, 8355839, 7303167, 7303167, 11513855, 6250495, 4145151,
			4145151, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 987135, 987135,
			987135, 987135, 987135, 2039807, 2039807, 3092479, 3092479, 3092479, 3092479, 3092479,
			3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479,
			4145151, 4145151, 4145151, 4145151, 4145151, 4145151, 4145151, 5197823, 6250495, 6250495,
			6250495, 7303167, 7303167, 8355839, 9408511, 15724543, 0, 0, 0, 0,
			15724543, 8355839, 7303167, 6250495, 6250495, 6250495, 6250495, 5197823, 4145151, 4145151,
			3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 987135, 987135,
			987135, 987135, 987135, 987135, 2039807, 2039807, 3092479, 3092479, 3092479, 3092479,
			3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479,
			3092479, 3092479, 4145151, 4145151, 4145151, 4145151, 4145151, 4145151, 4145151, 5197823,
			5197823, 6250495, 6250495, 7303167, 8355839, 14671871, 0, 0, 0, 0,
			16777199, 8355839, 6250495, 5197823, 5197823, 5197823, 5197823, 4145151, 4145151, 3092479,
			3092479, 3092479, 3092479, 3092479, 3092479, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 2039807, 2039807, 2039807, 2039807, 3092479, 3092479,
			3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479,
			3092479, 3092479, 3092479, 4145151, 4145151, 4145151, 4145151, 4145151, 4145151, 4145151,
			4145151, 5197823, 5197823, 6250495, 8355839, 13619199, 12566527, 16777135, 0, 12566527,
			9408511, 7303167, 5197823, 5197823, 5197823, 4145151, 4145151, 4145151, 3092479, 3092479,
			3092479, 3092479, 3092479, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 2039807, 2039807, 2039807, 2039807, 3092479,
			3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479,
			3092479, 3092479, 3092479, 3092479, 3092479, 4145151, 4145151, 4145151, 4145151, 4145151,
			4145151, 4145151, 5197823, 5197823, 5197823, 7303167, 8355839, 10461183, 16777167, 9408511,
			7303167, 6250495, 5197823, 4145151, 4145151, 4145151, 4145151, 3092479, 3092479, 3092479,
			3092479, 3092479, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 2039807, 2039807, 2039807, 2039807,
			2039807, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479,
			3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 4145151, 4145151, 4145151,
			4145151, 4145151, 4145151, 5197823, 5197823, 6250495, 7303167, 11513855, 9408511, 11513855,
			16777207, 5197823, 4145151, 4145151, 4145151, 4145151, 3092479, 3092479, 3092479, 3092479,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479,
			3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 4145151,
			4145151, 4145151, 4145151, 4145151, 5197823, 6250495, 8355839, 9408511, 6250495, 6250495,
			5197823, 4145151, 4145151, 4145151, 3092479, 3092479, 3092479, 3092479, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 3092479, 3092479, 3092479, 3092479, 3092479,
			3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479,
			3092479, 3092479, 4145151, 4145151, 4145151, 4145151, 6250495, 5197823, 5197823, 4145151,
			4145151, 4145151, 3092479, 3092479, 3092479, 3092479, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 3092479, 3092479,
			3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479,
			3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479,
			3092479, 3092479, 3092479, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479,
			3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 3092479, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807, 2039807,
			2039807, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135,
			987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135, 987135
	};
	
	public MandelbrotPicture(int pw, int ph){
		pictureWidth = pw;
		pictureHeight = ph;
		pictureBuffer = new int[pw*ph];
	}
	
	public MandelbrotPicture() {
		this(DEFAULT_WIDTH, DEFAULT_HEIGHT);
	}
	
	int FIXP = 10;
	
	
	private int calculateMandelbrotIterations(float x, float y) {
		float xx = 0.0f;
		float yy = 0.0f;
		int iter = 0;
		int defaultIter = mbIterations;
        float xxXxCache;
        float yyYyCache;
        float temp;
        
        while ((xxXxCache=xx * xx) + (yyYyCache=yy * yy) <= 4.0f && iter<defaultIter) {
			temp = xxXxCache - yyYyCache + x;
			
			yy = 2.0f*xx*yy + y;

			xx = temp;

			iter ++;
		}

		return iter;
	}
	
	
	private int calculateMandelbrotIterationsFixPoint(int x, int y, int FIXP, int defaultIter) {
		int xx = 0;
		int yy = 0;
		int iter = 0;
//		int defaultIter = settings.getIterations();
        int xxXxCache;
        int yyYyCache;
        int temp;
        
//        int FIXP = this.FIXP;
        
        while ((xxXxCache=((xx * xx)>>FIXP)) + (yyYyCache=((yy * yy)>>FIXP)) <= (4<<FIXP) && iter<defaultIter) {
			temp = xxXxCache - yyYyCache + x;
			
			yy = ((xx*yy)>>FIXP)*2 + y;

			xx = temp;

			iter ++;
		}

		return iter;
	}
	
	
	
	private void updateMandelbrotImage() {
		float deltaX = mbWidth/pictureWidth;
		float deltaY = mbHeight/pictureHeight;
		int index = 0;

		float y = mbY;
		for (int pY = 0;pY < pictureHeight; pY++, y+= deltaY) {
			float x = mbX;
			for (int pX=0;pX < pictureWidth; pX++, x+=deltaX) {
				//the real time consuming part!
				int iterations = calculateMandelbrotIterations(x,y);

				pictureBuffer[index] = precomputedColors[iterations];
				
				index++;
			}
		}

	}
	
	private void updateMandelbrotImageFixPointA() {
		updateMandelbrotImageFixPoint(mbWidth/pictureWidth,mbHeight/pictureHeight , FIXP, mbY, mbX, pictureHeight, pictureWidth, pictureBuffer, precomputedColors, mbIterations);
	}
	
	
	private void updateMandelbrotImageFixPoint(float deltaX, float deltaY, int tFIXP, float mbY, float mbX, int pictureHeight, int pictureWidth, int[] pictureBuffer, int[] precomputedColors, int mbIterations) {
//		float deltaX = mbWidth/pictureWidth;
//		float deltaY = mbHeight/pictureHeight;
		int index = 0;
		
		int INCP = 4;
		int FIXP = tFIXP+INCP;
		
		int deltaXInt = (int)(deltaX*(1<<FIXP));
		int deltaYInt = (int)(deltaY*(1<<FIXP));
		
		int mbYInt = (int)(mbY*(1<<FIXP));
		int mbXInt = (int)(mbX*(1<<FIXP));

		int y = mbYInt;
		for (int pY = 0;pY < pictureHeight; pY++, y+= deltaYInt) {
			int x = mbXInt;
			for (int pX=0;pX < pictureWidth; pX++, x+=deltaXInt) {
				//the real time consuming part!
				int iterations = calculateMandelbrotIterationsFixPoint(x>>INCP,y>>INCP,tFIXP, mbIterations);

				pictureBuffer[index] = precomputedColors[iterations];
				
				index++;
			}
		}

	}
	
	int fin[] = new int[1];
	
	private void updateMandelbrotImageCGRA_4FixPoint() {
		fin[0] = 1;
		updateMandelbrotImageCGRA_4FixPointA(mbWidth/pictureWidth, mbHeight/pictureHeight, mbIterations, FIXP, mbY, mbX,pictureWidth,pictureHeight,pictureBuffer,precomputedColors);
//		for(int i = 0; i < 100; i++){
//			System.out.println(i+ ": " + pictureBuffer[i]);
//		}
		
	}
	
	private void updateMandelbrotImageCGRA_4FixPointA(float deltaX, float deltaY, int defaultIter, int FIXP, float mbY, float mbX, int pictureWidth, int pictureHeight, int[] pictureBuffer, int [] precomputedColors) {
//		float deltaX = mbWidth/pictureWidth;
//		float deltaY = mbHeight/pictureHeight;
//		int defaultIter = mbIterations;
		int index = 0;
		
		int INCP = 4;
		
		int deltaXInt = (int)(deltaX*(1<<(FIXP+INCP)));
		int deltaYInt = (int)(deltaY*(1<<(FIXP+INCP)));
		
		int mbYInt = (int)(mbY*(1<<(FIXP+INCP)));
		int mbXInt = (int)(mbX*(1<<(FIXP+INCP)));
		
		int y = mbYInt;
		for (int pY = 0 ; pY < pictureHeight ; pY++, y+= deltaYInt) {
			int y2= y>>INCP;
			int x = mbXInt;
			//manual unrolling
			index = calculateLineCGRA_4(index,  x,  deltaXInt,  y2,  INCP,  defaultIter,pictureWidth,pictureHeight,pictureBuffer,precomputedColors, FIXP);
			System.out.println("INDEXX: " + index);
		}		
	}
	
	
	private int calculateLineCGRA_4(int index, int x, int deltaXInt, int y2, int INCP, int defaultIter, int pictureWidth, int pictureHeight, int[] pictureBuffer, int [] precomputedColors, int FIXP){
		for (int pX = 0 ; pX < pictureWidth ;) {
			
			boolean px0done = false;
			boolean px1done = false;
			boolean px2done = false;
			boolean px3done = false;
			
			int index0 = index++;
			int index1 = index++;
			int index2 = index++;
			int index3 = index++;
			
			int x0 = x;
			int x1 = x0 + deltaXInt;
			int x2 = x1 + deltaXInt;
			int x3 = x2 + deltaXInt;

			int xx0 = 0;
			int xx1 = 0;
			int xx2 = 0;
			int xx3 = 0;
			
			int yy0 = 0;
			int yy1 = 0;
			int yy2 = 0;
			int yy3 = 0;
			
			int iter0 = 0;
			int iter1 = 0;
			int iter2 = 0;
			int iter3 = 0;
			
			int xxXxCache0 = 0;
			int xxXxCache1 = 0;
	        int xxXxCache2 = 0;
	        int xxXxCache3 = 0;
	        
	        int yyYyCache0 = 0;
	        int yyYyCache1 = 0;
	        int yyYyCache2 = 0;
	        int yyYyCache3 = 0;
	              
	        while (!(px0done && px1done && px2done && px3done)) {
	        	yy0 = xx0*yy0>>FIXP;
	        	yy1 = xx1*yy1>>FIXP;
	        	yy2 = xx2*yy2>>FIXP;
	        	yy3 = xx3*yy3>>FIXP;
	        	
			    yy0 += yy0;
			    yy1 += yy1;
			    yy2 += yy2;
			    yy3 += yy3;
			    
			    yy0 += y2;
			    yy1 += y2;
			    yy2 += y2;
			    yy3 += y2;
			        	
			    xx0 = xxXxCache0 - yyYyCache0 + (x0>>INCP);
			    xx1 = xxXxCache1 - yyYyCache1 + (x1>>INCP);
			    xx2 = xxXxCache2 - yyYyCache2 + (x2>>INCP);
			    xx3 = xxXxCache3 - yyYyCache3 + (x3>>INCP);
						
			    xxXxCache0 = xx0*xx0>>FIXP;
			    xxXxCache1 = xx1*xx1>>FIXP;
			    xxXxCache2 = xx2*xx2>>FIXP;
			    xxXxCache3 = xx3*xx3>>FIXP;
			    
			    yyYyCache0 = yy0*yy0>>FIXP;
			    yyYyCache1 = yy1*yy1>>FIXP;
			    yyYyCache2 = yy2*yy2>>FIXP;
			    yyYyCache3 = yy3*yy3>>FIXP;
			    
			    if(!px0done) iter0++;
			    if(!px1done) iter1++;
			    if(!px2done) iter2++;
			    if(!px3done) iter3++;
			        	
				px0done = px0done || !(xxXxCache0 + yyYyCache0 <= (4<<FIXP) && iter0<defaultIter);
				px1done = px1done || !(xxXxCache1 + yyYyCache1 <= (4<<FIXP) && iter1<defaultIter);
				px2done = px2done || !(xxXxCache2 + yyYyCache2 <= (4<<FIXP) && iter2<defaultIter);
				px3done = px3done || !(xxXxCache3 + yyYyCache3 <= (4<<FIXP) && iter3<defaultIter);
	        }

	        
//	        if(iter0 < 0 || iter0 >= 128){
//	        	iter0 = 1;
//	        }
//	        if(iter1 < 0 || iter1 >= 128){
//	        	iter1 = 1;
//	        }
//	        if(iter2 < 0 || iter2 >= 128){
//	        	iter2 = 1;
//	        }
//	        if(iter3 < 0 || iter3 >= 128){
//	        	iter3 = 1;
//	        }
	        
		    pictureBuffer[index0] = precomputedColors[iter0];
		    pictureBuffer[index1] = precomputedColors[iter1];
		    pictureBuffer[index2] = precomputedColors[iter2];
		    pictureBuffer[index3] = precomputedColors[iter3];
		    
		    x = x3 + deltaXInt;
		    pX = pX + 4;
		}
		
		return index;
	}
	
	
	
	private void updateMandelbrotImageCGRA_8() {
		float deltaX = mbWidth/pictureWidth;
		float deltaY = mbHeight/pictureHeight;
		int defaultIter = mbIterations;
		int index = 0;
		
		float y = mbY;
		for (int pY = 0 ; pY < pictureHeight ; pY++, y+= deltaY) {
			
			float x = mbX;
			//manual unrolling
			for (int pX = 0 ; pX < pictureWidth ;) {
				
				boolean px0done = false;
				boolean px1done = false;
				boolean px2done = false;
				boolean px3done = false;
				boolean px4done = false;
				boolean px5done = false;
				boolean px6done = false;
				boolean px7done = false;

				int index0 = index++;
				int index1 = index++;
				int index2 = index++;
				int index3 = index++;
				int index4 = index++;
				int index5 = index++;
				int index6 = index++;
				int index7 = index++;
				
				float x0 = x;
				float x1 = x0 + deltaX;
				float x2 = x1 + deltaX;
				float x3 = x2 + deltaX;
				float x4 = x3 + deltaX;
				float x5 = x4 + deltaX;
				float x6 = x5 + deltaX;
				float x7 = x6 + deltaX;
				
				float xx0 = 0.0f;
				float xx1 = 0.0f;
				float xx2 = 0.0f;
				float xx3 = 0.0f;
				float xx4 = 0.0f;
				float xx5 = 0.0f;
				float xx6 = 0.0f;
				float xx7 = 0.0f;
				
				float yy0 = 0.0f;
				float yy1 = 0.0f;
				float yy2 = 0.0f;
				float yy3 = 0.0f;
				float yy4 = 0.0f;
				float yy5 = 0.0f;
				float yy6 = 0.0f;
				float yy7 = 0.0f;
				
				int iter0 = 0;
				int iter1 = 0;
				int iter2 = 0;
				int iter3 = 0;
				int iter4 = 0;
				int iter5 = 0;
				int iter6 = 0;
				int iter7 = 0;
				
		        float xxXxCache0 = 0f;
		        float xxXxCache1 = 0f;
		        float xxXxCache2 = 0f;
		        float xxXxCache3 = 0f;
		        float xxXxCache4 = 0f;
		        float xxXxCache5 = 0f;
		        float xxXxCache6 = 0f;
		        float xxXxCache7 = 0f;
		  
		        float yyYyCache0 = 0f;
		        float yyYyCache1 = 0f;
		        float yyYyCache2 = 0f;
		        float yyYyCache3 = 0f;
		        float yyYyCache4 = 0f;
		        float yyYyCache5 = 0f;
		        float yyYyCache6 = 0f;
		        float yyYyCache7 = 0f;
		        
		        while (!(px0done && px1done && px2done && px3done && px4done && px5done && px6done && px7done)) {
		        	yy0 = xx0*yy0;
		        	yy1 = xx1*yy1;
		        	yy2 = xx2*yy2;
		        	yy3 = xx3*yy3;
		        	yy4 = xx4*yy4;
		        	yy5 = xx5*yy5;
		        	yy6 = xx6*yy6;
		        	yy7 = xx7*yy7;

				    yy0 += yy0;
				    yy1 += yy1;
				    yy2 += yy2;
				    yy3 += yy3;
				    yy4 += yy4;
				    yy5 += yy5;
				    yy6 += yy6;
				    yy7 += yy7;
				    
				    yy0 += y;
				    yy1 += y;
				    yy2 += y;
				    yy3 += y;
				    yy4 += y;
				    yy5 += y;
				    yy6 += y;
				    yy7 += y;

				    xx0 = xxXxCache0 - yyYyCache0 + x0;
				    xx1 = xxXxCache1 - yyYyCache1 + x1;
				    xx2 = xxXxCache2 - yyYyCache2 + x2;
				    xx3 = xxXxCache3 - yyYyCache3 + x3;
				    xx4 = xxXxCache4 - yyYyCache4 + x4;
				    xx5 = xxXxCache5 - yyYyCache5 + x5;
				    xx6 = xxXxCache6 - yyYyCache6 + x6;
				    xx7 = xxXxCache7 - yyYyCache7 + x7;
							
				    xxXxCache0 = xx0*xx0;
				    xxXxCache1 = xx1*xx1;
				    xxXxCache2 = xx2*xx2;
				    xxXxCache3 = xx3*xx3;
				    xxXxCache4 = xx4*xx4;
				    xxXxCache5 = xx5*xx5;
				    xxXxCache6 = xx6*xx6;
				    xxXxCache7 = xx7*xx7;
				    
				    yyYyCache0 = yy0*yy0;
				    yyYyCache1 = yy1*yy1;
				    yyYyCache2 = yy2*yy2;
				    yyYyCache3 = yy3*yy3;
				    yyYyCache4 = yy4*yy4;
				    yyYyCache5 = yy5*yy5;
				    yyYyCache6 = yy6*yy6;
				    yyYyCache7 = yy7*yy7;
				    
				    if(!px0done) iter0++;
				    if(!px1done) iter1++;
				    if(!px2done) iter2++;
				    if(!px3done) iter3++;
				    if(!px4done) iter4++;
				    if(!px5done) iter5++;
				    if(!px6done) iter6++;
				    if(!px7done) iter7++;
					
					px0done = px0done || !(xxXxCache0 + yyYyCache0 <= 4.0f && iter0<defaultIter);
					px1done = px1done || !(xxXxCache1 + yyYyCache1 <= 4.0f && iter1<defaultIter);
					px2done = px2done || !(xxXxCache2 + yyYyCache2 <= 4.0f && iter2<defaultIter);
					px3done = px3done || !(xxXxCache3 + yyYyCache3 <= 4.0f && iter3<defaultIter);
					px4done = px4done || !(xxXxCache4 + yyYyCache4 <= 4.0f && iter4<defaultIter);
					px5done = px5done || !(xxXxCache5 + yyYyCache5 <= 4.0f && iter5<defaultIter);
					px6done = px6done || !(xxXxCache6 + yyYyCache6 <= 4.0f && iter6<defaultIter);
					px7done = px7done || !(xxXxCache7 + yyYyCache7 <= 4.0f && iter7<defaultIter);
		        }

			    pictureBuffer[index0] = precomputedColors[iter0];
			    pictureBuffer[index1] = precomputedColors[iter1];
			    pictureBuffer[index2] = precomputedColors[iter2];
			    pictureBuffer[index3] = precomputedColors[iter3];
			    pictureBuffer[index4] = precomputedColors[iter4];
			    pictureBuffer[index5] = precomputedColors[iter5];
			    pictureBuffer[index6] = precomputedColors[iter6];
			    pictureBuffer[index7] = precomputedColors[iter7];
			    
			    x = x7 + deltaX;
			    pX = pX + 8;
			}
		}		
	}
	
	private void updateMandelbrotImageCGRA_16FixPointA(){
		updateMandelbrotImageCGRA_16FixPoint(mbWidth/pictureWidth, mbHeight/pictureHeight, mbIterations, FIXP, mbY, mbX,pictureWidth,pictureHeight,pictureBuffer,precomputedColors,fin);
	}
	
	private void updateMandelbrotImageCGRA_16FixPoint(float deltaX, float deltaY, int defaultIter, int FIXP, float mbY, float mbX, int pictureWidth, int pictureHeight, int[] pictureBuffer, int [] precomputedColors, int[] fin) {
	//	float deltaX = mbWidth/pictureWidth;
	//	float deltaY = mbHeight/pictureHeight;
	//	int defaultIter = mbIterations;
		int index = 0;
		
		int INCP = 4;
		
		int deltaXInt = (int)(deltaX*(1<<(FIXP+INCP)));
		int deltaYInt = (int)(deltaY*(1<<(FIXP+INCP)));
		
		int mbYInt = (int)(mbY*(1<<(FIXP+INCP)));
		int mbXInt = (int)(mbX*(1<<(FIXP+INCP)));
		
		int y = mbYInt;
		for (int pY = 0 ; pY < pictureHeight ; pY++, y+= deltaYInt) {
			int y2 = y >> INCP;
			int x = mbXInt;
			//manual unrolling
			for (int pX = 0 ; pX < pictureWidth ;) {
				
				boolean px0done = false;
				boolean px1done = false;
				boolean px2done = false;
				boolean px3done = false;
				boolean px4done = false;
				boolean px5done = false;
				boolean px6done = false;
				boolean px7done = false;
				boolean px8done = false;
				boolean px9done = false;
				boolean px10done = false;
				boolean px11done = false;
				boolean px12done = false;
				boolean px13done = false;
				boolean px14done = false;
				boolean px15done = false;

				int index0 = index++;
				int index1 = index++;
				int index2 = index++;
				int index3 = index++;
				int index4 = index++;
				int index5 = index++;
				int index6 = index++;
				int index7 = index++;
				int index8 = index++;
				int index9 = index++;
				int index10 = index++;
				int index11 = index++;
				int index12 = index++;
				int index13 = index++;
				int index14 = index++;
				int index15 = index++;
				
				int x0 = x;
				int x1 = x0 + deltaXInt;
				int x2 = x1 + deltaXInt;
				int x3 = x2 + deltaXInt;
				int x4 = x3 + deltaXInt;
				int x5 = x4 + deltaXInt;
				int x6 = x5 + deltaXInt;
				int x7 = x6 + deltaXInt;
				int x8 = x7 + deltaXInt;
				int x9 = x8 + deltaXInt;
				int x10 = x9 + deltaXInt;
				int x11 = x10 + deltaXInt;
				int x12 = x11 + deltaXInt;
				int x13 = x12 + deltaXInt;
				int x14 = x13 + deltaXInt;
				int x15 = x14 + deltaXInt;
				
				int xx0 = 0;
				int xx1 = 0;
				int xx2 = 0;
				int xx3 = 0;
				int xx4 = 0;
				int xx5 = 0;
				int xx6 = 0;
				int xx7 = 0;
				int xx8 = 0;
				int xx9 = 0;
				int xx10 = 0;
				int xx11 = 0;
				int xx12 = 0;
				int xx13 = 0;
				int xx14 = 0;
				int xx15 = 0;
				
				int yy0 = 0;
				int yy1 = 0;
				int yy2 = 0;
				int yy3 = 0;
				int yy4 = 0;
				int yy5 = 0;
				int yy6 = 0;
				int yy7 = 0;
				int yy8 = 0;
				int yy9 = 0;
				int yy10 = 0;
				int yy11 = 0;
				int yy12 = 0;
				int yy13 = 0;
				int yy14 = 0;
				int yy15 = 0;
				
				int iter0 = 0;
				int iter1 = 0;
				int iter2 = 0;
				int iter3 = 0;
				int iter4 = 0;
				int iter5 = 0;
				int iter6 = 0;
				int iter7 = 0;
				int iter8 = 0;
				int iter9 = 0;
				int iter10 = 0;
				int iter11 = 0;
				int iter12 = 0;
				int iter13 = 0;
				int iter14 = 0;
				int iter15 = 0;
				
				int xxXxCache0 = 0;
				int xxXxCache1 = 0;
				int xxXxCache2 = 0;
				int xxXxCache3 = 0;
				int xxXxCache4 = 0;
				int xxXxCache5 = 0;
				int xxXxCache6 = 0;
				int xxXxCache7 = 0;
				int xxXxCache8 = 0;
				int xxXxCache9 = 0;
				int xxXxCache10 = 0;
				int xxXxCache11 = 0;
				int xxXxCache12 = 0;
				int xxXxCache13 = 0;
				int xxXxCache14 = 0;
				int xxXxCache15 = 0;
		  
				int yyYyCache0 = 0;
				int yyYyCache1 = 0;
				int yyYyCache2 = 0;
				int yyYyCache3 = 0;
				int yyYyCache4 = 0;
				int yyYyCache5 = 0;
				int yyYyCache6 = 0;
				int yyYyCache7 = 0;
				int yyYyCache8 = 0;
				int yyYyCache9 = 0;
				int yyYyCache10 = 0;
				int yyYyCache11 = 0;
				int yyYyCache12 = 0;
				int yyYyCache13 = 0;
				int yyYyCache14 = 0;
				int yyYyCache15 = 0;
		        
		        while (!(px0done && px1done && px2done && px3done && px4done && px5done && px6done && px7done && 
		        		 px8done && px9done && px10done && px11done && px12done && px13done && px14done && px15done)) {
		           	yy0 = xx0*yy0>>FIXP;
		        	yy1 = xx1*yy1>>FIXP;
		        	yy2 = xx2*yy2>>FIXP;
		        	yy3 = xx3*yy3>>FIXP;
		        	yy4 = xx4*yy4>>FIXP;
		        	yy5 = xx5*yy5>>FIXP;
		        	yy6 = xx6*yy6>>FIXP;
		        	yy7 = xx7*yy7>>FIXP;
		           	yy8 = xx8*yy8>>FIXP;
		        	yy9 = xx9*yy9>>FIXP;
		        	yy10 = xx10*yy10>>FIXP;
		        	yy11 = xx11*yy11>>FIXP;
		        	yy12 = xx12*yy12>>FIXP;
		        	yy13 = xx13*yy13>>FIXP;
		        	yy14 = xx14*yy14>>FIXP;
		        	yy15 = xx15*yy15>>FIXP;

				    yy0 += yy0;
				    yy1 += yy1;
				    yy2 += yy2;
				    yy3 += yy3;
				    yy4 += yy4;
				    yy5 += yy5;
				    yy6 += yy6;
				    yy7 += yy7;
				    yy8 += yy8;
				    yy9 += yy9;
				    yy10 += yy10;
				    yy11 += yy11;
				    yy12 += yy12;
				    yy13 += yy13;
				    yy14 += yy14;
				    yy15 += yy15;
				    
				    yy0 += y2;
				    yy1 += y2;
				    yy2 += y2;
				    yy3 += y2;
				    yy4 += y2;
				    yy5 += y2;
				    yy6 += y2;
				    yy7 += y2;
				    yy8 += y2;
				    yy9 += y2;
				    yy10 += y2;
				    yy11 += y2;
				    yy12 += y2;
				    yy13 += y2;
				    yy14 += y2;
				    yy15 += y2;

				    xx0 = xxXxCache0 - yyYyCache0 + (x0>>INCP);
				    xx1 = xxXxCache1 - yyYyCache1 + (x1>>INCP);
				    xx2 = xxXxCache2 - yyYyCache2 + (x2>>INCP);
				    xx3 = xxXxCache3 - yyYyCache3 + (x3>>INCP);
				    xx4 = xxXxCache4 - yyYyCache4 + (x4>>INCP);
				    xx5 = xxXxCache5 - yyYyCache5 + (x5>>INCP);
				    xx6 = xxXxCache6 - yyYyCache6 + (x6>>INCP);
				    xx7 = xxXxCache7 - yyYyCache7 + (x7>>INCP);
				    xx8 = xxXxCache8 - yyYyCache8 + (x8>>INCP);
				    xx9 = xxXxCache9 - yyYyCache9 + (x9>>INCP);
				    xx10 = xxXxCache10 - yyYyCache10 + (x10>>INCP);
				    xx11 = xxXxCache11 - yyYyCache11 + (x11>>INCP);
				    xx12 = xxXxCache12 - yyYyCache12 + (x12>>INCP);
				    xx13 = xxXxCache13 - yyYyCache13 + (x13>>INCP);
				    xx14 = xxXxCache14 - yyYyCache14 + (x14>>INCP);
				    xx15 = xxXxCache15 - yyYyCache15 + (x15>>INCP);
							
				    xxXxCache0 = xx0*xx0>>FIXP;
				    xxXxCache1 = xx1*xx1>>FIXP;
				    xxXxCache2 = xx2*xx2>>FIXP;
				    xxXxCache3 = xx3*xx3>>FIXP;
				    xxXxCache4 = xx4*xx4>>FIXP;
				    xxXxCache5 = xx5*xx5>>FIXP;
				    xxXxCache6 = xx6*xx6>>FIXP;
				    xxXxCache7 = xx7*xx7>>FIXP;
				    xxXxCache8 = xx8*xx8>>FIXP;
				    xxXxCache9 = xx9*xx9>>FIXP;
				    xxXxCache10 = xx10*xx10>>FIXP;
				    xxXxCache11 = xx11*xx11>>FIXP;
				    xxXxCache12 = xx12*xx12>>FIXP;
				    xxXxCache13 = xx13*xx13>>FIXP;
				    xxXxCache14 = xx14*xx14>>FIXP;
				    xxXxCache15 = xx15*xx15>>FIXP;

				    yyYyCache0 = yy0*yy0>>FIXP;
				    yyYyCache1 = yy1*yy1>>FIXP;
				    yyYyCache2 = yy2*yy2>>FIXP;
				    yyYyCache3 = yy3*yy3>>FIXP;
				    yyYyCache4 = yy4*yy4>>FIXP;
				    yyYyCache5 = yy5*yy5>>FIXP;
				    yyYyCache6 = yy6*yy6>>FIXP;
				    yyYyCache7 = yy7*yy7>>FIXP;
				    yyYyCache8 = yy8*yy8>>FIXP;
				    yyYyCache9 = yy9*yy9>>FIXP;
				    yyYyCache10 = yy10*yy10>>FIXP;
				    yyYyCache11 = yy11*yy11>>FIXP;
				    yyYyCache12 = yy12*yy12>>FIXP;
				    yyYyCache13 = yy13*yy13>>FIXP;
				    yyYyCache14 = yy14*yy14>>FIXP;
				    yyYyCache15 = yy15*yy15>>FIXP;
				    
				    if(!px0done) iter0++;
				    if(!px1done) iter1++;
				    if(!px2done) iter2++;
				    if(!px3done) iter3++;
				    if(!px4done) iter4++;
				    if(!px5done) iter5++;
				    if(!px6done) iter6++;
				    if(!px7done) iter7++;
				    if(!px8done) iter8++;
				    if(!px9done) iter9++;
				    if(!px10done) iter10++;
				    if(!px11done) iter11++;
				    if(!px12done) iter12++;
				    if(!px13done) iter13++;
				    if(!px14done) iter14++;
				    if(!px15done) iter15++;
					
					px0done = px0done || !(xxXxCache0 + yyYyCache0 <= (4<<FIXP) && iter0<defaultIter);
					px1done = px1done || !(xxXxCache1 + yyYyCache1 <= (4<<FIXP) && iter1<defaultIter);
					px2done = px2done || !(xxXxCache2 + yyYyCache2 <= (4<<FIXP) && iter2<defaultIter);
					px3done = px3done || !(xxXxCache3 + yyYyCache3 <= (4<<FIXP) && iter3<defaultIter);
					px4done = px4done || !(xxXxCache4 + yyYyCache4 <= (4<<FIXP) && iter4<defaultIter);
					px5done = px5done || !(xxXxCache5 + yyYyCache5 <= (4<<FIXP) && iter5<defaultIter);
					px6done = px6done || !(xxXxCache6 + yyYyCache6 <= (4<<FIXP) && iter6<defaultIter);
					px7done = px7done || !(xxXxCache7 + yyYyCache7 <= (4<<FIXP) && iter7<defaultIter);
					px8done = px8done || !(xxXxCache8 + yyYyCache8 <= (4<<FIXP) && iter8<defaultIter);
					px9done = px9done || !(xxXxCache9 + yyYyCache9 <= (4<<FIXP) && iter9<defaultIter);
					px10done = px10done || !(xxXxCache10 + yyYyCache10 <= (4<<FIXP) && iter10<defaultIter);
					px11done = px11done || !(xxXxCache11 + yyYyCache11 <= (4<<FIXP) && iter11<defaultIter);
					px12done = px12done || !(xxXxCache12 + yyYyCache12 <= (4<<FIXP) && iter12<defaultIter);
					px13done = px13done || !(xxXxCache13 + yyYyCache13 <= (4<<FIXP) && iter13<defaultIter);
					px14done = px14done || !(xxXxCache14 + yyYyCache14 <= (4<<FIXP) && iter14<defaultIter);
					px15done = px15done || !(xxXxCache15 + yyYyCache15 <= (4<<FIXP) && iter15<defaultIter);

		        }

			    pictureBuffer[index0] = precomputedColors[iter0];
			    pictureBuffer[index1] = precomputedColors[iter1];
			    pictureBuffer[index2] = precomputedColors[iter2];
			    pictureBuffer[index3] = precomputedColors[iter3];
			    pictureBuffer[index4] = precomputedColors[iter4];
			    pictureBuffer[index5] = precomputedColors[iter5];
			    pictureBuffer[index6] = precomputedColors[iter6];
			    pictureBuffer[index7] = precomputedColors[iter7];
			    pictureBuffer[index8] = precomputedColors[iter8];
			    pictureBuffer[index9] = precomputedColors[iter9];
			    pictureBuffer[index10] = precomputedColors[iter10];
			    pictureBuffer[index11] = precomputedColors[iter11];
			    pictureBuffer[index12] = precomputedColors[iter12];
			    pictureBuffer[index13] = precomputedColors[iter13];
			    pictureBuffer[index14] = precomputedColors[iter14];
			    pictureBuffer[index15] = precomputedColors[iter15];
			    
			    x = x15 + deltaXInt;
			    pX = pX + 16;
			}
		}		
	}

	public void show() {
//		updateMandelbrotImageFixPointA();
		updateMandelbrotImageCGRA_4FixPoint();
		check();
	}
	
	public void check() {
		boolean passed = true;
		for(int i = 0; i < pictureBuffer.length; i++) {
			if(pictureBuffer[i] != pictureBufferRef[i]) {
				System.out.println("Error: pictureBuffer[" + i + "]=" + pictureBuffer[i] + ", pictureBufferRef[" + i + "]=" + pictureBufferRef[i]);
				passed = false;
			}
		}
		System.out.println(passed?"\npassed!":"\nfailed!");
	}
	
	public static void main(String[] args){
		MandelbrotPicture mbc = new MandelbrotPicture();
		mbc.show();
	}

}
