package generator;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Calendar;
import java.util.HashSet;
import java.util.Set;

import org.stringtemplate.v4.ST;
import org.stringtemplate.v4.STGroupFile;

import cgramodel.CBoxModel;
import cgramodel.CBoxModel.BranchSelectionConnection;
import cgramodel.CgraModel;
import cgramodel.ContextMaskCBoxEvaluationBlock;
import cgramodel.ContextMaskPE;
import cgramodel.PEModel;
import operator.Implementation;
import operator.Operator;
import target.Processor;

/**
 * Root class for all generators. It constructs the data path of a CGRA, which is independent
 * of the the host processor. For each integration with a different host processor a new VerilogGenerator class
 * is to be created that is an heritage of this class. <br> The naming convention is VerilogGenerator<b>Hostprocessor</b>.
 * @author Dennis Wolf
 * @param <Technology>
 *
 */
public abstract class VerilogGenerator  {


	/**
	 * Model to be exported/converted into an Verilog description
	 */
	protected CgraModel model = null;

	protected String destinationFolder = "";

	/**
	 * Set of all modules the CGRA contains.
	 */
	protected Set<String> modules;

	/**
	 * Field to to store whether single Operator testbenches are to dumped as well.
	 */
	boolean dumpOperatorTestbench;

	/**
	 * Field that holds the date
	 */
	java.util.Date date;


	/**
	 * Set of all top level ports.
	 */
	Set<VerilogPort> toplevelports	= new HashSet<VerilogPort>();
	
	
	protected String initializationPath = null;


	protected static final String CLOCK  = "CLK";
	protected static final String RESET  = "RST";

	/**
	 * Constructor to create an object
	 * @param model Composition to be exported
	 */
	public VerilogGenerator(CgraModel model){
		this();
		this.model = model;
		modules = new HashSet<String>();
	}

	/**
	 * Constructor to create an object
	 * @param model Composition to be exported
	 */
	public VerilogGenerator(){
		modules = new HashSet<String>();
	}


	/**
	 * Setter method for a composition {@link model}
	 * @param model
	 */
	public void setModel(CgraModel model){
		this.model = model;
	}

	/**
	 * Getter method for a composition {@link model} that is to be exported
	 * @param model
	 */
	public CgraModel getModel(){
		return model;
	}

	/**
	 * Container method to export a composition. Core method is {@link printVerilogDescription}.<br>
	 * 
	 * <b> Important : </b>
	 * Do not use this method unless you've used the method <i> finalize() </i> in CGRAModel.
	 * @param folder Destination folder where all Verilog files are to be stored
	 * @param model Model to exported
	 */
	public void printVerilogDescription(String folder, CgraModel model){
		this.model = model;
		destinationFolder = folder;
		printVerilogDescription();
	}

	/**
	 * Container method to export a composition. Core method is {@link printVerilogDescription}.<br>
	 * 
	 * <b> Important : </b>
	 * Do not use this method unless you've used the method <i> finalize() </i> in CGRAModel. 
	 * @param folder Destination folder where all Verilog files are to be stored
	 */
	public void printVerilogDescription(String folder){
		destinationFolder = folder;
		printVerilogDescription();
	}

	/**
	 * This method uses ancient String Template magic to generate Verilog Code that represents the given model.<br>
	 * 
	 * <b> Important : </b>
	 * Do not use this method unless you've used the method <i> finalize() </i> in CGRAModel.
	 *  
	 * @param model  Model of the CGRA
	 * @param fold  folder for export
	 */
	private void printVerilogDescription(){
		if(destinationFolder.isEmpty()){
			destinationFolder= target.Processor.Instance.getHardwareDestinationPath();
		}

		if(model == null){
			throw new IllegalArgumentException("The Cgra is null and therefore not ready for an export. Check"
					+ " all encodings and contextmasks");
		}
		if(!model.isFinalized()){
			throw new IllegalArgumentException("The Cgra is not finalized and therefore not ready for an export. Check"
					+ " all encodings and contextmasks");
		}
		File folder;		
		//		 checks and deletes for existing folder
		folder = new File(destinationFolder);
		if (folder.exists()) {
			String[] entries = folder.list();
			for (String s : entries) {
				File currentFile = new File(folder.getPath(), s);
				currentFile.delete();
			}
			folder.delete();
		}
		folder.mkdir();
		date = Calendar.getInstance().getTime();

		prepare();
		addStaticFiles();

		for (PEModel pe : model.getPEs()) {
			printOperators(pe);
			printAluVerilogI(pe);
			printRegisterFile(pe);
			printPE(pe);
		}
		printHostProcessorRelatedModules();
		printCbox();
		printCCU();
		printTopLevel();

		printInformation();
		printDummy(model);
	}

	private void printCCU() {
		STGroupFile group = new STGroupFile(target.Processor.Instance.getHardwareTemplatePathDataPath() + "/Context_Control_Unit.stg", 'ยง', 'ยง');
		ST template = group.getInstanceOf("CCU");
		template.add("stallcapability", model.isStallable());
<<<<<<< HEAD
		if(initializationPath != null){
			template.add("initPath", initializationPath);
		}
=======
		template.add("branchselection", model.isConditionalJumps());
>>>>>>> f20ec5aeab03faa8426cab6e9a6f9c13bec466ad
		dump("Context_Control_Unit.v", template);		
		modules.add("Context_Control_Unit.v");
	}

	/**
	 * This method can be used for preparation steps if needed
	 */
	protected abstract void prepare();

	/**
	 * Method to print the top level module. This varies with the host processor and has to be generated dynamically.
	 */
	protected abstract void printTopLevel();


	/**
	 * There are some static Verilog files that don't need to be generated dynamically and can be copied. Currently
	 * the following files are static:
	 * 
	 * <p><ul>
	 * <li> ContextControlUnit
	 * </ul><p>
	 */
	protected void addStaticFiles(){
	}

	/**
	 * Method to generate the Verilog description of a single PE.
	 * @param pe
	 */
	private void printPE(PEModel pe) {
		STGroupFile group = new STGroupFile(target.Processor.Instance.getHardwareTemplatePathDataPath() + "/PE_template.stg", 'ยง', 'ยง');
		ST template = group.getInstanceOf("PE");
		template.add("cache", pe.getMemAccess());
		template.add("controlflow", pe.getControlFlow());
		template.add("multicycle", pe.getMultiCycle());
		template.add("stallcapability", model.isStallable());
		int contextsize = model.getContextMemorySize();
		template.add("contextsize", contextsize);
		template.add("contextaddrwidth", (int) Math.ceil((Math.log(contextsize) / Math.log(2))));
		template.add("ID", pe.getID());
		int regfilesize = pe.getRegfilesize();
		template.add("regfilesize", regfilesize);
		template.add("pipelined", model.isPipelined());

		String inputs = "";
		for (PEModel source : pe.getInputs()) {
			if (pe.getID() != source.getID()) {
				inputs = inputs + "input wire [" + source.getMaxWidthResult() + "-1:0]	INPUT_" + source.getID() + "_I,\n";
			}
		}

		int nrOfCBoxInputs = pe.getNumberOfCBoxInputs();
		template.add("nrOfPredicationSignals", nrOfCBoxInputs);
		template.add("useCase", nrOfCBoxInputs != 1);


		for(int i = 0; i < nrOfCBoxInputs; i++){
			ST caseTemplate = group.getInstanceOf("Case");
			caseTemplate.add("case", i);
			template.add("cases", caseTemplate.render());
		}


		if(!inputs.isEmpty()) {
			template.add("interconnect_inputs", inputs);
		} 

		template.add("outputwidth", pe.getMaxWidthResult());
		if(pe.getMaxWidthInputA()>0){
			template.add("inputwidtha", pe.getMaxWidthInputA());
		}
		if(pe.getMaxWidthInputB()>0){
			template.add("inputwidthb", pe.getMaxWidthInputB());
		}
		template.add("liveout", pe.getLiveout());
		template.add("livein", pe.getLivein());

		String aluA = "";
		String aluB = "";
		int counter = 0;
		for (PEModel source : pe.getInputs()) {
			if (pe.getID() != source.getID()) {
				aluA = aluA + counter + "	: w_alu_in_A ";
				if(model.isPipelined()){
					aluA = aluA + "<";
				}
				aluA = aluA + "= INPUT_" + source.getID() + "_I;\n";

				aluB = aluB + counter + "	: w_alu_in_B ";
				if(model.isPipelined()){
					aluB = aluB + "<";
				}
				aluB = aluB +"= INPUT_" + source.getID() + "_I;\n";
				counter++;
			}
		}
		aluA = aluA + counter + "	: w_alu_in_A ";
		if(model.isPipelined()){
			aluA = aluA + "<";
		}
		aluA = aluA +"= w_reg_to_operand_mux;\n";


		aluB = aluB + counter + "	: w_alu_in_B ";
		if(model.isPipelined()){
			aluB = aluB + "<";
		}

		aluB = aluB + "= w_reg_to_operand_mux;\n";
		counter++;
		if(model.isPipelined() && model.isRFBypass()){
			aluA = aluA + counter + "	: w_alu_in_A <= w_alu_Out;\n";
			aluB = aluB + counter + "	: w_alu_in_B <= w_alu_Out;\n";
			counter++;
		}
		if(model.isSecondRFOutput2ALU()){
			aluA = aluA + counter + "	: w_alu_in_A ";
			aluB = aluB + counter + "	: w_alu_in_B ";
			if(model.isPipelined()){
				aluB = aluB + "<";
				aluA = aluA + "<";
			}
			aluA = aluA + "= w_direct_o;\n";
			aluB = aluB + "= w_direct_o;\n";
		}

		template.add("muxA", aluA);
		template.add("muxB", aluB);

		template.add("aluinit", "Alu" + pe.getID());
		printMask(template, pe);
		template.add("date", date);
		
		if(initializationPath != null){
			template.add("initPath", initializationPath+"/pe"+pe.getID()+".dat");
		}
		
		dump("PE" + pe.getID() + ".v", template);

	}

	/**
	 * This class holds the option to print modules that are needed for the individual processors.
	 */
	abstract void printHostProcessorRelatedModules();

	/**
	 * The main purpose of this class is to determine the encoding of a Context for a PE. It is based on the 
	 * ContextMaskPE class. 
	 * @param template template to be filled
	 * @param pe The PE for which the encoding should be determined
	 */
	public void printMask(ST template, PEModel pe) {

		ContextMaskPE peMask = pe.getContext();
		template.add("opL", peMask.getOpL());
		template.add("opH", peMask.getOpH());
		template.add("muxRegL", peMask.getMuxRegL());
		template.add("muxRegH", peMask.getMuxRegH());
		template.add("muxRegwidth", peMask.getRegistermuxwidth());
		template.add("muxwidth", peMask.getMuxwidth());
		if(pe.getMaxWidthInputB()>0){
			template.add("muxBL", peMask.getMuxBL());
			template.add("muxBH", peMask.getMuxBH());
		}
		if(pe.getMaxWidthInputA()>0){
			template.add("muxAL", peMask.getMuxAL());
			template.add("muxAH", peMask.getMuxAH());
		}
		int regaddrwidth = peMask.getRegAddrWidthWrite();
		if(regaddrwidth >0){
			template.add("regaddrwidthWrite", regaddrwidth);
			template.add("regaddrwidthRead", peMask.getRegAddrWidthRead());


			template.add("wrL", peMask.getWrL());
			template.add("wrH", peMask.getWrH());

			if (pe.getMemAccess()) {
				template.add("rdCacheL", peMask.getRdCacheL());
				template.add("rdCacheH", peMask.getRdCacheH());
			}

			template.add("rddoL", peMask.getRddoL());
			template.add("rddoH", peMask.getRddoH());

			template.add("rdmuxL", peMask.getRdmuxL());
			template.add("rdmuxH", peMask.getRdmuxH());
		}
		template.add("wr_en", peMask.getWr_en());
		template.add("cond_wr", peMask.getCond_wr());
		if (pe.getMemAccess()) {
			template.add("cond_dma", peMask.getCond_dma());
		}
		if(peMask.getOpcodewidth() > 0){
			template.add("opcodewidth", peMask.getOpcodewidth());
		}
		if(peMask.getCBoxSelWidth()>0){
			template.add("cBoxSelWidth", peMask.getCBoxSelWidth());
			template.add("cBoxSelL", peMask.getCBoxSelL());
			template.add("cBoxSelH", peMask.getCBoxSelH());
		}
		template.add("contextwidth", peMask.getContextWidth());
	}


	private void printAluVerilogI(PEModel pe){
		STGroupFile group = new STGroupFile(target.Processor.Instance.getHardwareTemplatePathDataPath() + "/Alu_template _interleaved.stg", 'ยง', 'ยง');
		ST template = group.getInstanceOf("Alu");
		template.add("date", date.toString());
		template.add("multicycle", pe.getMultiCycle());
		template.add("stallcapability",model.isStallable());
		
		if(pe.getContextMaskPE().getOpcodewidth() > 0){
			template.add("opcode", true);
		}
		template.add("ID", pe.getID());

		int arithmeticcount = 0;
		int controlflowcount = 0;

		int arithmeticcounter = 0;
		int controlflowcounter = 0;


		for(Operator op : pe.getAvailableNonNativeOperators().keySet()){
			
			boolean arith = true;
			if(op.isCacheLoad()){
				arith = false;
			}
			if(op.isCacheStore()){
				arith = false;
			}
			if(op.isCacheLoad()){
				arith = false;
			}
			if(op.isControlFlow()){
				controlflowcount++;
				arith = false;
			}
			if(arith){
				arithmeticcount++;
			}
		}
		
		if(controlflowcount > 1){
			template.add("multiplestatusdriver", controlflowcount);
		}
		if(arithmeticcount > 1){
			template.add("multiplearithmeticdriver", arithmeticcount);
		}
		
		for (Operator op : pe.getAvailableNonNativeOperators().keySet()) {

			Implementation imp = pe.getAvailableOperators().get(op);
			ST bib = group.getInstanceOf("OP");
			
			// Handling if operation is control flow
			if(op.isControlFlow()){
				
				String statusdriver =  "w_valid_result_"+imp.getName();
				if(controlflowcounter != controlflowcount-1){
					template.add("statusdriver", statusdriver+", ");
				}
				else{
					template.add("statusdriver", statusdriver);
				}
				String casestatementstatus = Integer.toString(controlflowcount) + "'b";
				for(int index = 0; index < controlflowcount ; index ++){
					if(index != controlflowcounter){
						casestatementstatus += "0";
					}
					else{
						casestatementstatus += "1";
					}
				}
				casestatementstatus += " : STATUS_O = w_status_" + imp.getName() +";\n";
				template.add("casestatementstatus", casestatementstatus);
				template.add("statusmoduleoutput", "status" + imp.getName());
				controlflowcounter++;
			}

			// Handling when operation is accesses the cache
			// TODO - integrate counters!
			if(op.isCacheAccess()){
				template.add("cachevaliddriver", ",cachevalid_"+imp.getName());
				if(op.isCacheStore()){
					template.add("cachewritedriver", "cachewrite_"+imp.getName());
					bib.add("cachewrite", true);
				}
			}
			
			// Handling of arithmetic operations
			if(!op.isCacheAccess() && !op.isControlFlow()){
				
				String arithemticresultdriver =  "w_valid_result_"+imp.getName();
				if(arithmeticcounter != arithmeticcount-1){
					template.add("arithmeticdriver", arithemticresultdriver+", ");
				}
				else{
					template.add("arithmeticdriver", arithemticresultdriver);
				}
				String casestatementarithmetic = Integer.toString(arithmeticcount) + "'b";
				for(int index = 0; index < arithmeticcount ; index ++){
					if(index != arithmeticcounter){
						casestatementarithmetic += "0";
					}
					else{
						casestatementarithmetic += "1";
					}
				}
				casestatementarithmetic += " : RESULT_O = w_result_" + imp.getName() +";\n";
				template.add("casestatementarithmetic", casestatementarithmetic);
				template.add("arithmeticmoduleoutput", "w_result_" + imp.getName());
				arithmeticcounter++;
			}
			

			template.add("ops", "parameter " + imp.getName() + " = " + imp.getOpcode() + ";\n");
			template.add("enables", "wire w_valid_" + imp.getName()+";\n"  + "assign w_valid_" + imp.getName()+" = (OPCODE_I == " + imp.getName() + ") ? 1'b1 : 1'b0;\n \n");
			

		

			bib.add("multicycle", imp.isMultiCycle());
			bib.add("op", imp.getName());
			bib.add("cache", op.isCacheAccess());
			bib.add("controlflow", op.isControlFlow());
			

			// TODO: properly handle operations with less than 2 operands
			switch (imp.getNumberOfOperands()) {
			case 1:
				bib.add("inputwidtha", imp.getOperandPortWidth(0));
				break;
			case 2:
				bib.add("inputwidtha", imp.getOperandPortWidth(0));
				bib.add("inputwidthb", imp.getOperandPortWidth(0));
			default:
				break;
			}
			if(!imp.isMemAccess() && !imp.isControlFlow()){
				bib.add("resultwidth", imp.getResultFormat().getBitWidth());
			}
			template.add("bib", bib.render());

		}
		int inputwidtha = pe.getMaxWidthInputA();
		if(inputwidtha > 0){
			template.add("inputwidtha", inputwidtha);
		}
		int inputwidthb = pe.getMaxWidthInputB();
		if(inputwidthb > 0){
			template.add("inputwidthb", inputwidthb);
		}
		template.add("outputwidth", pe.getMaxWidthResult());

		dump("Alu" + pe.getID() + ".v", template);
	}


	/**
	 * TODO derive operator specific enable signal by ALU enable, ALU OPCODE and operator.getOpcode() 
	 * @param pe
	 */
	private void printAluVerilog(PEModel pe) {

		STGroupFile group = new STGroupFile(target.Processor.Instance.getHardwareTemplatePathDataPath() + "/Alu_template.stg", '{', '}');
		ST template = group.getInstanceOf("Alu");
		template.add("date", date.toString());
		template.add("cache", pe.getMemAccess());
		template.add("controlflow", pe.getControlFlow());
		template.add("multicycle", pe.getMultiCycle());
		if(pe.getContextMaskPE().getOpcodewidth() > 0){
			template.add("opcode", true);
		}
		template.add("ID", pe.getID());

		for (Implementation imp : pe.getAvailableOperatorImplementations()) {
			if (!imp.isNative()) {
				template.add("ops", "parameter " + imp.getName() + " = " + imp.getOpcode() + ";\n");

				ST wiring = group.getInstanceOf("wiring");
				ST bib = group.getInstanceOf("OP");

				wiring.add("cache", imp.isMemAccess());
				wiring.add("cacheglobal", pe.getMemAccess());
				wiring.add("op", imp.getName());
				wiring.add("controlflow", imp.isControlFlow());
				wiring.add("controlflowglobal", pe.getControlFlow());

				template.add("resultconnection", wiring.render());

				bib.add("cache", imp.isMemAccess());
				bib.add("multicycle", imp.isMultiCycle());
				bib.add("op", imp.getName());
				bib.add("controlflow", imp.isControlFlow());

				// TODO: properly handle operations with less than 2 operands
				switch (imp.getNumberOfOperands()) {
				case 1:
					bib.add("inputwidtha", imp.getOperandPortWidth(0));
					break;
				case 2:
					bib.add("inputwidtha", imp.getOperandPortWidth(0));
					bib.add("inputwidthb", imp.getOperandPortWidth(0));
				default:
					break;
				}
				if(!imp.isMemAccess() && !imp.isControlFlow()){
					bib.add("resultwidth", imp.getResultFormat().getBitWidth());
				}
				template.add("bib", bib.render());
			}
		}
		int inputwidtha = pe.getMaxWidthInputA();
		if(inputwidtha > 0){
			template.add("inputwidtha", inputwidtha);
		}
		int inputwidthb = pe.getMaxWidthInputB();
		if(inputwidthb > 0){
			template.add("inputwidthb", inputwidthb);
		}
		template.add("outputwidth", pe.getMaxWidthResult());

		dump("Alu" + pe.getID() + ".v", template);
	}

	/**
	 * Enable/Disable operator testbench generation
	 * If enabled, for each operator module op, the following additional files will be generated:
	 * <ul>
	 *   <li> tb_op.v    - the testbench
	 *   <li> tb_op.sim  - the Modelsim script to start the simulation
	 *   <li> tb_op.wave - the Modelsim script to display relevant signals
	 * </ul>
	 * @param flag
	 */
	public void setDumpOperatorTestbench(boolean flag) {
		dumpOperatorTestbench = flag;
	}

	/**
	 * Dump Verilog modules of operations used in a certain PE.
	 * Already existing modules (either old ones ore from other PEs) will be overwritten, as all implementation-relevant 
	 * operator settings are reflected by the module name. 
	 * @param pe
	 */
	private void printOperators(PEModel pe) {
		for (Implementation imp : pe.getAvailableOperatorImplementations()) {
			if (imp.isNative()) {
				continue;
			}
			try {
				dump(imp.getName() + ".v", imp.getModule());
				if (dumpOperatorTestbench) {
					String tb = imp.getTestbench();
					if (tb == null) {
						continue;
					}
					dump(imp.getTestbenchName() + ".v",    tb);
					dump(imp.getTestbenchName() + ".sim",  imp.getSimTCL());
					dump(imp.getTestbenchName() + ".wave", imp.getWaveTCL());
				}
			} catch (Implementation.NotImplementedException e) {
				System.err.println(e.getMessage());
			}
		}
	}

	/**
	 * This methods exports a register file for a PE
	 * @param pe Pe that should hold the RF
	 */
	private void printRegisterFile(PEModel pe) {

		STGroupFile group = new STGroupFile(target.Processor.Instance.getHardwareTemplatePathDataPath() + "/Registerfile_template.stg", 'ยง', 'ยง');
		ST template = group.getInstanceOf("Registerfile");
		template.add("cache", pe.getMemAccess());
		template.add("codeConstantsInReadAddress", pe.codeConstantsInReadAddress());
		template.add("stallcapability", model.isStallable());

		if(pe.getRegfilesize()>1){
			template.add("regfile_size", pe.getRegfilesize());
			template.add("regfile_addr_width_write", (int) pe.getContextMaskPE().getRegAddrWidthWrite());
			template.add("regfile_addr_width_read", (int) pe.getContextMaskPE().getRegAddrWidthRead());
		}
		template.add("regfile_word_width", pe.getMaxWidthResult());
		template.add("ID", pe.getID());

		dump("Registerfile_" + pe.getID() + ".v", template);
	}

	/**
	 * Method to export the CBox
	 */
	private void printCbox() {

		printCBoxWrapper();

		STGroupFile group = new STGroupFile(target.Processor.Instance.getHardwareTemplatePathDataPath() + "/C_Box_template_bypassvariations.stg", 'ยง', 'ยง');
		ST template = group.getInstanceOf("CBox");
		CBoxModel cboxmodel = model.getcBoxModel();



		template.add("date", date.toString());
		template.add("memoryslots", cboxmodel.getMemorySlots());

		//		int counter = 0;
		//		for(BranchSelectionConnection bss : cboxmodel.getBranchSelectionSources()){
		//			template.add("branchSelection", "  " + counter + ": BRANCH_SELECTION_O = " + bss.getVerilogDeclaration() + ";\n");
		//			counter ++;
		//			if(cboxmodel.getBranchSelectionSources().size() == 1){
		//				template.add("branchSelectionBypass","  BRANCH_SELECTION_O = " + bss.getVerilogDeclaration() + ";\n");
		//			}
		//		}
		//
		//		template.add("branchSelectionBypassMemory", cboxmodel.getBranchSelectionBypass());
		int counter = 0;
		for (int i = 0; i < model.getNrOfPEs(); i++) {
			if (model.getPEs().get(i).getControlFlow()) {
				template.add("status_inputs", "input wire 			STATUS_" + model.getPEs().get(i).getID() + "_I, \n");
				template.add("mux_status", counter + ": w_status = STATUS_" + model.getPEs().get(i).getID() + "_I; \n");
				template.add("bypass_inputmux", "STATUS_" + model.getPEs().get(i).getID() + "_I; \n");
				counter++;
			}
		}

		ContextMaskCBoxEvaluationBlock contextmaskcbox = model.getcBoxModel().getContextmaskEvaLuationBlocks();
		template.add("ccntwidth", model.getCCNTWidth());
		template.add("contextmemorywidth", contextmaskcbox.getContextWidth());
		template.add("contextsize", model.getContextMemorySize());
		template.add("bypassAndNegative", contextmaskcbox.getBypassAndNegative());
		template.add("bypassAndPositive", contextmaskcbox.getBypassAndPositive());
		template.add("bypassOrNegative", contextmaskcbox.getBypassOrNegative());
		template.add("bypassOrPositive", contextmaskcbox.getBypassOrPositive());
		template.add("raddrOrPositiveH", contextmaskcbox.getRAddrOrPositiveH());
		template.add("raddrOrPositiveL", contextmaskcbox.getRAddrOrPositiveL());
		template.add("raddrOrNegativeH", contextmaskcbox.getRAddrOrNegativeH());
		template.add("raddrOrNegativeL", contextmaskcbox.getRAddrOrNegativeL());

		template.add("waddrNegativeH", contextmaskcbox.getWAddrNegativeH());
		template.add("waddrNegativeL", contextmaskcbox.getWAddrNegativeL());
		template.add("waddrPositiveH", contextmaskcbox.getWAddrPositiveH());
		template.add("waddrPositiveL", contextmaskcbox.getWAddrPositiveL());
		if(contextmaskcbox.getInputMuxWidth()>0){
			template.add("muxH", contextmaskcbox.getInputMuxH());
			template.add("muxL", contextmaskcbox.getInputMuxL());
		}
		template.add("write_enable", contextmaskcbox.getWriteEnable());


		int outputs = model.getcBoxModel().getCBoxPreicationOutputsPerBox();
		if(outputs>1){
			template.add("nrOfOutputs", outputs);
			for(int i = 1; i < outputs; i++){
				ST addOutputAddr = group.getInstanceOf("CBoxReadPortAddr");
				addOutputAddr.add("i", i);
				addOutputAddr.add("raddrPredicationL", contextmaskcbox.getRAddrPredicationL()+i*contextmaskcbox.getAddrWidth());
				addOutputAddr.add("raddrPredicationH", contextmaskcbox.getRAddrPredicationL()+(i+1)*contextmaskcbox.getAddrWidth()-1);
				template.add("additionalOutputs", addOutputAddr.render());

				ST addOutputAssign = group.getInstanceOf("CBoxReadPortAssign");
				addOutputAssign.add("i", i);
				addOutputAssign.add("raddrPredicationL", contextmaskcbox.getRAddrPredicationL()+i*contextmaskcbox.getAddrWidth());
				addOutputAssign.add("raddrPredicationH", contextmaskcbox.getRAddrPredicationL()+(i+1)*contextmaskcbox.getAddrWidth()-1);
				template.add("additionalOutputAssign", addOutputAssign.render());
			}
			template.add("raddrPredicationH", contextmaskcbox.getRAddrPredicationL()+contextmaskcbox.getAddrWidth()-1);
			template.add("raddrPredicationL", contextmaskcbox.getRAddrPredicationL());
		} else {
			template.add("raddrPredicationH", contextmaskcbox.getRAddrPredicationH());
			template.add("raddrPredicationL", contextmaskcbox.getRAddrPredicationL());
		}
		
		if(initializationPath != null){
			template.add("initPath", initializationPath);
		}


		dump("CBox.v", template);
	}


	/**
	 * By using this method a tcl script is stored that triggers a synthesis&implementation run once with the exported constraints.
	 * @param folder destination folder for the script
	 */
	private void makeTCLSynthesis(String folder) {

		File file = new File(folder+"/synthesisvivado.tcl");
		try {
			FileWriter fw = new FileWriter(file);
			BufferedWriter bw;
			bw = new BufferedWriter(fw);

			bw.write(" # to run this script, open a terminal first. Navigate to this folder, then type in \n" +
					" # vivado โmodebatch โsource <go.tcl> \n" +
					"create_project -force utilization_test_" + model.getName() + " \n" +
					"add_file -scan_for_includes Cgra.v \n" +
					"add_file Controlunit.v \n" +
					"add_file CBox.v \n" +
					"add_file ContextPE.v \n" +
					"add_file block_multiplier.v \n" +
					"add_file Context_cbox.v \n \n");

			for(int i = 0; i < model.getNrOfPEs() ;i++){
				bw.write("add_file PE" + i + ".v \n" );
				bw.write("add_file ALU" + i + ".v \n \n" );
			}
			bw.write("add_file Registerfile.v \n" +
					"add_file Registerfile_mem_access.v \n" +
					"add_file timing_constraints.xdc \n" +
					"set_property board_part xilinx.com:vc709:1.1 [current_project] \n" + 
					" #synth_design -s_1 \n" +
					"create_run -flow {Vivado Synthesis 2015} s_1 \n" +
					"launch_run s_1 \n" +
					"wait_on_run s_1\n" +
					" #report_timing_summary \n" +
					"launch_runs impl_1 \n" +
					"wait_on_run impl_1 \n" +
					"open_run impl_1 ");

			bw.close();
			fw.close();
		}
		catch(IOException e){
			System.err.println("IOException in print Verilog -> TCL Script Synthesis");
		}
	}

	/**
	 * Helper method to finally dump a file/module
	 * @param file Filename of the module 
	 * @param content content of the file
	 */
	protected void dump(String file, String content) {
		try {
			if(!file.contains("dummy")){
				modules.add(file);
			}
			file = destinationFolder + "/" + file;
			FileWriter fw = new FileWriter(file);
			fw.write(content);
			fw.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * Container method for {@link dump}
	 * @param file Filename of the module 
	 * @param template tempalte to be exported
	 */
	protected void dump(String file, ST template) {
		dump(file, template.render() + "\n");
	}


	/**
	 * This methods prints an overview of the CGRA that is exported. It contains several information about the
	 * CGRA.
	 */
	protected void printInformation(){

		String processor = Processor.Instance.getClass().getName();
		int index2cut = processor.lastIndexOf(".");
		if(processor.contains(".")){
			processor = processor.substring(index2cut+1);
		}

		try {
			FileWriter fw = new FileWriter(destinationFolder + "/Data Sheet");
			BufferedWriter bw;
			bw = new BufferedWriter(fw);
			bw.write("Host processor : " + processor + "\n"); 

			bw.write("Data path width : " + Processor.Instance.getDataPathWidth()+ "\n");

			bw.write("ALU pipelined: " + model.isPipelined() + "\n");
			
			bw.write("2ndRFOut2ALU :" + model.isSecondRFOutput2ALU() );

			bw.write("Cond. mem bypassed in CBOX: ");

			bw.write("Conditional Jumps : " + model.isConditionalJumps());
			
			
			for(BranchSelectionConnection cons : model.getcBoxModel().getBranchSelectionSources()){
				bw.write(cons.toString() + "  ");
			}				
			bw.write("\n");
			bw.write( "Context memorysize : " + model.getContextMemorySize() + "\n");
			bw.write( "" + "\n");
			bw.write( "Number of PEs : " + model.getNrOfPEs() + "\n");
			bw.write( "Number of PEs with memory access : " + model.getNrOfMemoryAccessPEs() + "\n");
			bw.write( "Number of PEs with control flow : " + model.getNrOfControlFlowPEs() + "\n");
			bw.write( "\n ---- Overview Processing Elements ----\n");

			for(PEModel pe : model.getPEs()){
				bw.write(" -- PE " + pe.getID() + "  -- " + pe.getRegfilesize() + " Regentries \n");
				for(Operator op : pe.getAvailableNonNativeOperators().keySet()){
					bw.write(op.toString() + " \t ( dur: " + pe.getAvailableNonNativeOperators().get(op).getLatency()  
							+ ", en: " + pe.getAvailableNonNativeOperators().get(op).getLatency()  +") \n");
				}
				bw.newLine();
			}

			bw.close();
			fw.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}


	/**
	 * The toplevel ports can be generated by iteration over the Set {@link toplevelports}. Previously the
	 * set has to be filled. This method shouldb e to be used and extented for this purpose.
	 */
	protected abstract void fillPortList();

	public java.util.Date getDate() {
		return date;
	}

	public  Set<VerilogPort> getToplevelports() {
		return toplevelports;
	}
	public String getToplevelName() {
		return model.getName();
	}

	public Set<String> getModules() {
		return modules;
	}


	/**
	 * Since it is often of interest to synthesis the CGRA as a stand alone design, the fan out often exceeds the io-limits
	 * of an FPGA. Therefore a top level dummy can be used to reduce the fan out. 
	 * @param cgra
	 */

	protected abstract void printDummy(CgraModel cgra);

	public String getTemplateFileName(String templateName) {
		return null;
	}

	protected void addAllFilesFrom(String sourceFolder, String folderName) {
		File dir = new File(sourceFolder + "/" + folderName);

		if (!dir.exists()) {
			System.err.printf("Specified folder %s does not exist.\n", sourceFolder + "/" + folderName);
			return;
		}

		for (File file : dir.listFiles()) {
			int dot = file.getName().lastIndexOf('.');
			if (dot != 0) {
				String ext = file.getName().substring(dot + 1);
				if (ext.equals("stg"))
					continue; // don't add ST files, they are added in different ways
				if (ext.equals("v") || ext.equals("sv"))
					modules.add(file.getName());
			}

			Path source = Paths.get(sourceFolder + "/" + folderName + "/" + file.getName());
			Path destination = Paths.get(this.destinationFolder + "/" + file.getName());
			try {
				Files.copy(source, destination);
			} catch (IOException e) {
				System.err.println("IO Exception while adding a static file with file " + source);
			}
		}
	}


	private void printCBoxWrapper(){

		STGroupFile group = new STGroupFile(target.Processor.Instance.getHardwareTemplatePathDataPath() + "/C_Box_wrapper_template.stg", 'ยง', 'ยง');
		ST template = group.getInstanceOf("CBoxWrapper");
		CBoxModel cboxmodel = model.getcBoxModel();

		template.add("date", date.toString());
		template.add("memoryslots", cboxmodel.getMemorySlots());
		template.add("contextmemorysize", model.getContextMemorySize());
		template.add("stallcapability", model.isStallable());
		template.add("branchselection", model.isConditionalJumps());
		ContextMaskCBoxEvaluationBlock contextmaskcbox = model.getcBoxModel().getContextmaskEvaLuationBlocks();
		template.add("ccntwidth", model.getCCNTWidth());
		template.add("contextmemorywidth", contextmaskcbox.getContextWidth());
		template.add("addrWidth", contextmaskcbox.getAddrWidth());

		template.add("nrOfOutputs", model.getcBoxModel().getNrOfEvaluationBlocks()*model.getcBoxModel().getCBoxPreicationOutputsPerBox());
		template.add("evaluationblocks", model.getcBoxModel().getNrOfEvaluationBlocks());

		int counter = 0;
		for(BranchSelectionConnection bss : cboxmodel.getBranchSelectionSources()){
			template.add("branchSelection", "  " + counter + ": BRANCH_SELECTION_O = " + bss.getVerilogDeclaration() + ";\n");
			counter ++;
			template.add("branchSelectionBypass","  BRANCH_SELECTION_O = " + bss.getVerilogDeclaration() + ";\n");
		}
		if(cboxmodel.getBranchSelectionSources().size() != 1){
			template.add("branchselectionwidth", cboxmodel.getContextmaskWrapper().getBranchSelectionMuxWidth());
		}


		int outputs = model.getcBoxModel().getCBoxPreicationOutputsPerBox();
		if(outputs>1){
			for(int i = 1; i < outputs; i++){
				ST addOutputAssign = group.getInstanceOf("CBoxReadPortAssign");
				addOutputAssign.add("i", i);
				addOutputAssign.add("nrOfOutputsPerCBox", model.getcBoxModel().getCBoxPreicationOutputsPerBox());
				template.add("additionalOutputAssignments", addOutputAssign.render());

				ST addOutput = group.getInstanceOf("CBoxReadPort");
				addOutput.add("i", i);
				addOutput.add("evaluationblocks", model.getcBoxModel().getNrOfEvaluationBlocks());
				addOutput.add("addrWidth", contextmaskcbox.getAddrWidth());
				template.add("additionalOutputs", addOutput.render());

				template.add("additionalOutputConnections", ".w_rd_addr_predication"+i+"(w_rd_addr_predication"+i+"[n]),\n");
			}
		}

		//			template.add("branchSelectionBypassMemory", cboxmodel.getBranchSelectionBypass());
		counter = 0;
		for (int i = 0; i < model.getNrOfPEs(); i++) {
			if (model.getPEs().get(i).getControlFlow()) {
				template.add("status_inputs", "input wire 			STATUS_" + model.getPEs().get(i).getID() + "_I, \n");
				template.add("statusIns", "\n  .STATUS_"+i+"_I(STATUS_"+i+"_I),");
				//				template.add("mux_status", counter + ": w_status = STATUS_" + model.getPEs().get(i).getID() + "_I; \n");
				//				template.add("bypass_inputmux", "STATUS_" + model.getPEs().get(i).getID() + "_I; \n");
				counter++;
			}
		}



		dump("CBoxWrapper.v", template);
	}
	
	public void setInitializationPath(String path){
		initializationPath = path;
	}
}
